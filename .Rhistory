pmax(f_X_m, 1e-300))) + #small minimum value, algorithm fails is this reaches 0
(z_k0_m *
log((1 - prev_m) * #paper is inconsistent on whether to use log p or log of product
pmax(f_Y_m, 1e-300))) #small minimum value, algorithm fails is this reaches 0
)
}
calc_z_kd <- function(d){
#combined numerators into single function. d determines which part is used.
((prev_m * f_X_m) * d + ((1 - prev_m) * f_Y_m) * (1 - d)) /
((prev_m * f_X_m) + ((1 - prev_m) * f_Y_m))
}
calc_next_prev <- function(){
mean(z_k1_m)
}
calc_next_mu_id <- function(z_kd_m){
#returns vector of mu_id(m+1) estimates
colSums((z_kd_m * t_k)) /
sum(z_kd_m)
}
calc_next_sigma_d <- function(z_kd_m, mu_id_m){
# returns covariance matrix sigma_d(m+1) estimate
n_method <- length(mu_id_m)
sigma_d <- matrix(nrow = n_method, ncol = n_method, dimnames = list(method_names, method_names))
for(i in 1:n_method){
for(j in 1:i){
sigma_d[i, j] <-
sum(z_kd_m * (t_k[, i] - mu_id_m[i]) * (t_k[, j] - mu_id_m[j])) /
sum(z_kd_m)
sigma_d[j, i] <- sigma_d[i, j]
}
}
return(sigma_d)
}
calc_eta_j <- function(){
(mu_i1_m - mu_i0_m) / sqrt(diag(sigma_i1_m) + diag(sigma_i0_m))
}
calc_A_j <- function(){
stats::setNames(stats::pnorm(eta_j_m), method_names)
}
t_k <- data
n_method <- ncol(t_k)
n_obs <- nrow(t_k)
method_names <- if(is.null(colnames(t_k))){name_thing("method", n_method)}else{colnames(t_k)}
obs_names <- if(is.null(rownames(t_k))){name_thing("obs", n_obs)}else{rownames(t_k)}
if(!all(c("prev_1", "mu_i1_1", "sigma_i1_1", "mu_i0_1", "sigma_i0_1") %in% names(init)) |
any(sapply(init, is.null))
){init <- pollinate_ML_continuous(t_k)}
prev_m <- init$prev_1
mu_i1_m <- init$mu_i1_1
sigma_i1_m <- init$sigma_i1_1
mu_i0_m <- init$mu_i0_1
sigma_i0_m <- init$sigma_i0_1
list_prev <- list()
list_mu_i1 <- list()
list_sigma_i1 <- list()
list_mu_i0 <- list()
list_sigma_i0 <- list()
list_eta_j <- list()
list_A_j <- list()
list_z_k1 <- list()
list_z_k0 <- list()
list_l_cond <- list()
for(iter in 1:max_iter){
f_X_m <- mvtnorm::dmvnorm(t_k, mean = mu_i1_m, sigma = sigma_i1_m)
f_Y_m <- mvtnorm::dmvnorm(t_k, mean = mu_i0_m, sigma = sigma_i0_m)
eta_j_m <- calc_eta_j()
A_j_m <- calc_A_j()
z_k1_m <- calc_z_kd(d = 1)
z_k0_m <- calc_z_kd(d = 0)
l_cond_m <- calc_l_cond_continuous()
list_prev <- c(list_prev, list(prev_m))
list_mu_i1 <- c(list_mu_i1, list(mu_i1_m))
list_sigma_i1 <- c(list_sigma_i1, list(sigma_i1_m))
list_mu_i0 <- c(list_mu_i0, list(mu_i0_m))
list_sigma_i0 <- c(list_sigma_i0, list(sigma_i0_m))
list_eta_j <- c(list_eta_j, list(eta_j_m))
list_A_j <- c(list_A_j, list(A_j_m))
list_z_k1 <- c(list_z_k1, list(z_k1_m))
list_z_k0 <- c(list_z_k0, list(z_k0_m))
list_l_cond <- c(list_l_cond, list(l_cond_m))
if(iter > 1){if(abs(list_l_cond[[iter]] - list_l_cond[[iter - 1]]) < tol){break}}
prev_m <- calc_next_prev()
mu_i1_m <- calc_next_mu_id(z_k1_m)
sigma_i1_m <- calc_next_sigma_d(z_k1_m, mu_i1_m)
mu_i0_m <- calc_next_mu_id(z_k0_m)
sigma_i0_m <- calc_next_sigma_d(z_k0_m, mu_i0_m)
}
output <-
new("MultiMethodMLEstimate",
results = list(
prev_est = prev_m,
mu_i1_est = mu_i1_m,
sigma_i1_est = sigma_i1_m,
mu_i0_est = mu_i0_m,
sigma_i0_est = sigma_i0_m,
eta_j_est = eta_j_m,
A_j_est = A_j_m,
z_k1_est = z_k1_m,
z_k0_est = z_k0_m),
names = list(
method_names = method_names,
obs_names = obs_names),
iter = iter,
type = "continuous")
if(save_progress){
output@prog <-
list(
prev = list_prev,
mu_i1 = list_mu_i1,
sigma_i1 = list_sigma_i1,
mu_i0 = list_mu_i0,
sigma_i0 = list_sigma_i0,
eta_j = list_eta_j,
A_j = list_A_j,
z_k1 = list_z_k1,
z_k0 = list_z_k0,
l_cond = list_l_cond)
}
return(output)
}
library(emery)
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5)
y <- estimate_ML("continuous", x$generated_data)
ggplot(data.frame(x$generated_data), aes(method1, method2, color = x$params$D)) +
geom_point() +
coord_equal()
plot_ML_continuous(y)
#' @rdname plot_ML
#' @order 4
#' @export
#'
#' @import dplyr
#' @import ggplot2
#' @importFrom stats setNames
#' @importFrom purrr pluck
plot_ML_continuous <-
function(
ML_est,
params = list(prev_1 = NULL, mu_i1_1 = NULL, sigma_i1_1 = NULL, mu_i0_1 = NULL, sigma_i0_1 = NULL, D = NULL)){
# internal functions
calc_pr_i <- function(b){ # (T/F) Positive Rate calculator
z_kd <- if(b){ML_est@results$z_k1_est}else{ML_est@results$z_k0_est}
apply(x$generated_data, 2, function(column){
sapply(column, function(row, column){
sum(z_kd[which(column >= row)])
}, column = column)}) / sum(z_kd)
}
plot_ROC <- function(){
AUC_data <-
ML_est@results$A_j_est |>
as.list() |>
data.frame() |>
tidyr::pivot_longer(everything(), names_to = "method", values_to = "value") |>
dplyr::mutate(label = paste0(method, ": ", sprintf("%0.3f", value))) |>
dplyr::pull(label) |>
paste(collapse = "\n")
AUC_label <- paste0("AUC\n", AUC_data)
ROC_data |>
dplyr::bind_rows(expand.grid(method = method_names, level = "", fpr = 0, tpr = 0)) |>
ggplot2::ggplot(ggplot2::aes(x = fpr, y = tpr, group = method, color = method)) +
ggplot2::geom_path() +
ggplot2::geom_text(ggplot2::aes(label = level), vjust = "inward", hjust = "inward") + #ggrepel?
ggplot2::geom_abline(slope = 1, lty = 2, color = "gray50") +
ggplot2::annotate("text", x = 0.6, y = 0.1, label = AUC_label, hjust = 0, vjust = 0) +
ggplot2::scale_y_continuous("TPR", limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) +
ggplot2::scale_x_continuous("FPR", limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) +
ggplot2::scale_color_brewer("", palette = "Set1", na.value = "gray30", drop = FALSE) +
ggplot2::coord_fixed() +
ggplot2::theme(panel.background = ggplot2::element_blank(),
panel.grid = ggplot2::element_line(color = "gray80"),
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "bottom") +
ggplot2::ggtitle("ROC Curves")
}
plot_z_kd <- function(z_kd){
do.call(rbind, purrr::pluck(ML_est, "prog", z_kd)) |>
as.data.frame() |>
stats::setNames(obs_names) |>
dplyr::mutate(iter = row_number()) |>
tidyr::pivot_longer(!iter, names_to = "group", values_to = "value") |>
dplyr::left_join(dis_data, by = "group") |>
tidyr::replace_na(list(true_D = "Class unknown")) |>
ggplot2::ggplot(ggplot2::aes(x = iter, y = value, group = group, color = true_D)) +
ggplot2::geom_line() +
ggplot2::scale_y_continuous(z_kd, limits = c(0, 1), breaks = seq(0, 1, 0.1), expand = c(0, 0)) +
ggplot2::scale_x_continuous("Iteration", limits = c(0, ML_est@iter)) +
ggplot2::scale_color_brewer("", palette = "Set1", na.value = "gray30", drop = FALSE) +
ggplot2::theme(panel.background = ggplot2::element_blank(),
panel.grid = ggplot2::element_line(color = "gray80"),
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "bottom")
}
method_names <- ML_est@names$method_names
n_method <- length(method_names)
obs_names <- ML_est@names$obs_names
n_obs <- length(obs_names)
if(is.null(params$D)){true_D <- NA}else{true_D <- params$D}
fpr_i <- calc_pr_i(FALSE)
tpr_i <- calc_pr_i(TRUE)
ROC_data <-
dplyr::left_join(
fpr_i_long <- as.data.frame(as.table(fpr_i)),
tpr_i_long <- as.data.frame(as.table(tpr_i)),
by = c("Var1", "Var2")
) |> stats::setNames(c("obs", "method", "fpr", "tpr")) |>
dplyr::arrange(method, desc(fpr), desc(tpr))
ROC_plot <- plot_ROC()
# create progress plots
# create data frame of disease state and observation name for coloring progress plots
dis_data <- # disease status
data.frame(
true_D = as.character(as.numeric(true_D)),
group = obs_names) |>
tidyr::replace_na(list(true_D = "Unknown")) |>
dplyr::mutate(true_D = paste("Class", true_D))
z_k1_plot <- plot_z_kd("z_k1")
z_k0_plot <- plot_z_kd("z_k0")
z_k1_hist <-
data.frame(z_k1_est = ML_est@results$z_k1_est) |>
dplyr::mutate(true_D = dis_data$true_D) |>
ggplot2::ggplot(ggplot2::aes(x = q_k1_est, fill = true_D)) +
ggplot2::geom_histogram(bins = 40) +
ggplot2::scale_y_continuous("Observations", limits = c(0, NA), expand = c(0, 0.5)) +
ggplot2::scale_x_continuous(breaks = seq(0, 1, 0.05), expand = c(0, 0)) +
ggplot2::scale_fill_brewer("", palette = "Set1", na.value = "gray30", drop = FALSE) +
ggplot2::theme(panel.background = ggplot2::element_blank(),
panel.grid = ggplot2::element_line(color = "gray80"),
panel.spacing = unit(2, "lines"),
strip.text.y.right = ggplot2::element_text(),
strip.background = ggplot2::element_rect(fill = "gray80", color = "black"),
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1, vjust = 0.5))
return(
list(
ROC = ROC_plot,
z_k1 = z_k1_plot,
z_k0 = z_k0_plot,
z_k1_hist = z_k1_hist))
}
plot_ML_continuous(y)
library(emery)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:3], se = rep(0.8, 3), sp = rep(0.8, 3))
b <- estimate_ML("binary", a$generated_data)
plot(b)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:3], se = rep(0.8, 3), sp = rep(0.8, 3))
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:3], se = rep(0.8, 3), sp = rep(0.8, 3))
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
a <- generate_multimethod_data("binary", method_names = letters[1:3], se = rep(0.8, 3), sp = rep(0.8, 3))
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
f <- generate_multimethod_data("ordinal", n_obs = 200, method_names = c("l", "m", "n", "o", "p"), n_method = 5, n_method_subset = 3, first_reads_all = T)
g <- estimate_ML("ordinal", data = f$generated_data)
plot(g)
plot(g, params = f$params)
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5)
y <- estimate_ML("continuous", x$generated_data)
ggplot(data.frame(x$generated_data), aes(method1, method2, color = x$params$D)) +
geom_point() +
coord_equal()
plot_ML_continuous(y)
plot_ML_continuous(y)
library(emery)
roxygen2::roxygenize
roxygen2::roxygenize()
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:3], se = rep(0.8, 3), sp = rep(0.8, 3))
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
#
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3)
#
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b, params = a$params)
b@results
a$generated_data
f <- generate_multimethod_data("ordinal", n_obs = 200, method_names = c("l", "m", "n", "o", "p"), n_method = 5, n_method_subset = 3, first_reads_all = T)
g <- estimate_ML("ordinal", data = f$generated_data)
plot(g)
plot(g, params = f$params)
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5)
x$generated_data
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5, n_method_subset = 3, first_reads_all = T)
x$generated_data
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5, n_method_subset = 3, first_reads_all = T)
y <- estimate_ML("continuous", x$generated_data)
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5)
y <- estimate_ML("continuous", x$generated_data)
plot_ML_continuous(y)
plot_ML_continuous(y, params = x$params)
b@results
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
b@results
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
if(is.null(params$D)){true_D <- NA}else{true_D <- params$D}
true_D
ML_est <- b
ML_est
b
# create data frame of disease state and observation name for coloring progress plots
dis_data <- # disease status
data.frame(
D = as.character(as.numeric(true_D)),
group = obs_names) |>
dplyr::mutate(D = paste("Class", D))
dis_data
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
# create data frame of disease state and observation name for coloring progress plots
dis_data <- # disease status
data.frame(
true_D = as.character(true_D),
group = obs_names) |>
dplyr::mutate(true_D = paste("Class", true_D))
dis_data
data.frame(
true_D = as.character(true_D),
group = obs_names)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
roxygen2::roxygenize()
roxygen2::roxygenize()
?plot
?stringr
library::stringr
library(stringr)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
install.packages("renv")
renv::dependencies(here("R", "binary_method_functions.R"))
renv::dependencies(here::here("R", "binary_method_functions.R"))
install.packages("here")
renv::dependencies(here::here("R", "binary_method_functions.R"))
renv::dependencies(here::here("R", "ordinal_method_functions.R"))
renv::dependencies(here::here("R", "continuous_method_functions.R"))
renv::dependencies(here::here("R", "classes_and_methods.R"))
renv::dependencies(here::here("R", "utility_functions.R"))
roxygen2::roxygenize()
usethis::use_mit_license()
utils::globalVariables
?utils::globalVariables
roxygen2::roxygenize()
roxygen2::roxygenize()
data()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
matrix(data.frame(x = 1, y = 2))
asmatrix(data.frame(x = 1, y = 2))
as.matrix(data.frame(x = 1, y = 2))
as.matrix(data.frame(x = 1, y = 2, row.names = "a"))
roxygen2::roxygenize()
roxygen2::roxygenize()
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
plot(b)
plot(b, params = a$params)
#
#
f <- generate_multimethod_data("ordinal", n_obs = 200, method_names = c("l", "m", "n", "o", "p"), n_method = 5, n_method_subset = 3, first_reads_all = T)
g <- estimate_ML("ordinal", data = f$generated_data)
plot(g)
plot(g, params = f$params)
x <- generate_multimethod_data("continuous", n_obs = 200, prev = 0.2, n_method = 5)
y <- estimate_ML("continuous", x$generated_data)
plot_ML_continuous(y)
plot_ML_continuous(y, params = x$params)
?estimate_ML
v <- boot_ML("binary", a$generated_data)
View(v)
roxygen2::roxygenize()
library(emery)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = rep(0.8, 4), sp = rep(0.8, 4), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
v <- boot_ML("binary", a$generated_data)
View(v)
View(a)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = c(0.8, 0.9, 0.72, 0.86), sp = c(0.8, 0.95, 0.95, 0.82), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
# plot(b)
plot(b, params = a$params)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = c(0.8, 0.9, 0.72, 0.86), sp = c(0.8, 0.95, 0.95, 0.82), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
# plot(b)
plot(b, params = a$params)
a <- generate_multimethod_data("binary", method_names = letters[1:4], se = c(0.8, 0.9, 0.72, 0.86), sp = c(0.8, 0.95, 0.95, 0.82), first_reads_all = TRUE, n_method_subset = 3, n_method = 4)
b <- estimate_ML("binary", a$generated_data)
# plot(b)
plot(b, params = a$params)
vignette("rd")
?ggplot
roxygen2::roxygenize()
?mapply(function, ...)
?map
?lm
citation
citation()
roxygen2::roxygenize()
citation("ggplot")
citation("ggplot2")
citation("tidyverse")
?citation
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(emery)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
?Rdpack::insertRef
get_bibentries(package = "emery")
Rdpack::get_bibentries(package = "emery")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(Rdpack)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(emery)
?estimate_ML
?str_detect
?lm
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
vignette("rd-formatting")
roxygen2::roxygenize()
library(emery)
?estimate_ML
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
usethis::use_news_md()
roxygen2::roxygenize()
roxygen2::roxygenize()
usethis::use_news_md()
usethis::use_cran_comments()
?news
