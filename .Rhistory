se_1 <- data[D_majority == 1, ] |> colMeans(na.rm = TRUE) |> setNames(method_names)
# Estimate individual test sp wrt majority classification
sp_1 <- 1 - (data[D_majority == 0, ] |> colMeans(na.rm = TRUE) |> setNames(method_names))
list(prev_1 = prev_1,
se_1 = se_1,
sp_1 = sp_1)
}
init = list(prev_1 = NULL, se_1 = NULL, sp_1 = NULL)
if(any(sapply(init, is.null))){init <- pollinate_EM_binary(data)}
method_names <- if(is.null(names(data))){thing_namer("method", ncol(data))}else{names(data)}
# starting values
se_m <- init$se_1
sp_m <- init$sp_1
prev_m <- init$prev_1
# initialize lists
list_se <- list(se_m)
list_sp <- list(sp_m)
list_prev <- list(prev_m)
converged <- FALSE
iter <- 1
while(!converged & iter <= n_iter){
A2_m <- calc_A2(data, se_m = se_m, prev_m)
B2_m <- calc_B2(data, sp_m = sp_m, prev_m)
qk_m <- calc_qk(A2_m, B2_m)
`se_m+1` <- calc_next_se(data, qk_m)
`sp_m+1` <- calc_next_sp(data, qk_m)
`prev_m+1` <- calc_next_prev(data, qk_m)
list_se <- c(list_se, list(`se_m+1`))
list_sp <- c(list_sp, list(`sp_m+1`))
list_prev <- c(list_prev, list(`prev_m+1`))
if(max(abs(`se_m+1` - se_m), abs(`sp_m+1` - sp_m), abs(`prev_m+1` - prev_m)) < tol){converged <- TRUE}
se_m <- `se_m+1`
sp_m <- `sp_m+1`
prev_m <- `prev_m+1`
iter <- iter + 1
}
do.call(rbind, list_prev)
?merge
row(df_prev$prev)
df_prev <- as.data.frame(do.call(rbind, list_prev))
row(df_prev$prev)
row(df_prev)
df_prev$iter <- row(df_prev)
df_prev
df_se <-
reshape(
as.data.frame(do.call(rbind, list_se)),
direction = "long",
varying = list(method_names),
times = method_names,
timevar = "method",
v.names = "se",
idvar = "iter")
df_sp <-
reshape(
as.data.frame(do.call(rbind, list_sp)),
direction = "long",
varying = list(method_names),
times = method_names,
timevar = "method",
v.names = "sp",
idvar = "iter")
df_prev |>
merge(df_se)
df_prev |>
merge(df_se) |>
merge(df_sp)
df_se |>
merge(df_sp) |>
merge(df_prev)
n_levels = 5
matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE)
n_method = 3
pmfD_plus = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE)
pmfD_plus
matrix(rep(n_levels:1 - 1, n_method), nrow = n_method, byrow = TRUE)
pmfD_plus = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE)
pmfD_plus
sim_imp_gs_data.ordinal <-
function(n_method = 3,
n_obs = 100,
prev = 0.5,
D = NULL,
n_levels = 5,
pmfD_plus = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE),
pmfD_minus = matrix(rep(n_levels:1 - 1, n_method), nrow = n_method, byrow = TRUE),
method_names = NULL,
level_names = NULL
){
# TODO - add level_names argument
# use names if available
method_names <- if(is.null(names(method_names))){thing_namer("method", n_method)}
level_names <- if(is.null(names(level_names))){thing_namer("level", n_method)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
rownames(pmfD_plus) <- test_names
rownames(pmfD_minus) <- test_names
pos <- round(n_obs * prev, 0)
neg <- n_obs - pos
if (is.null(D)){D <- c(rep(1, pos), rep(0, neg))} else {pos = sum(D); neg = sum(1 - D)}
ord_sample <-
function(n, pmf){sample(1:length(pmf), n, replace = TRUE, prob = pmf)}
t_k <-
rbind(
lapply(setNames(1:n_method, test_names), function(x) ord_sample(pos, pmfD_plus[x, ])) %>% as.data.frame,
lapply(setNames(1:n_method, test_names), function(x) ord_sample(neg, pmfD_minus[x, ])) %>% as.data.frame
) %>% as.matrix
sen <- list()
spc <- list()
for(x in 1:n_levels){
sen[[x]] <- colMeans(t_k[D == 1, ] >= x)
spc[[x]] <- colMeans(t_k[D == 0, ] < x)
}
list(t_k = t_k,
D = D,
sen = as.data.frame(sen, col.names = level_names),
spc = as.data.frame(spc, col.names = level_names))
}
method_names = NULL
level_names = NULL
names(pmfD_plus) <- list(method_names, level_names)
pmfD_plus
pmfD_plus = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE)
method_names <- if(is.null(names(method_names))){thing_namer("method", n_method)}
level_names <- if(is.null(names(level_names))){thing_namer("level", n_method)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
pmfD_minus = matrix(rep(n_levels:1 - 1, n_method), nrow = n_method, byrow = TRUE)
method_names <- if(is.null(names(method_names))){thing_namer("method", n_method)}
level_names <- if(is.null(names(level_names))){thing_namer("level", n_method)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
dimnames(pmfD_plus) <- list(method_names, level_names)
method_names
level_names
n_levels = 5
level_names = NULL
level_names <- if(is.null(names(level_names))){thing_namer("level", n_level)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
dimnames(pmfD_plus) <- list(method_names, level_names)
dimnames(pmfD_minus) <- list(method_names, level_names)
pmfD_plus
level_names
level_names <- if(is.null(names(level_names))){thing_namer("level", n_level)}
level_names <- if(is.null(names(level_names))){thing_namer("level", n_levels)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
dimnames(pmfD_plus) <- list(method_names, level_names)
dimnames(pmfD_minus) <- list(method_names, level_names)
pmfD_plus
pos <- round(n_obs * prev, 0)
n_method = 3
n_obs = 100
prev = 0.5
D = NULL
pos <- round(n_obs * prev, 0)
neg <- n_obs - pos
if (is.null(D)){D <- c(rep(1, pos), rep(0, neg))} else {pos = sum(D); neg = sum(1 - D)}
D
pos
ord_sample <-
function(n, pmf){sample(1:length(pmf), n, replace = TRUE, prob = pmf)}
lapply(setNames(1:n_method, test_names), function(x) ord_sample(pos, pmfD_plus[x, ]))
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ]))
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame()
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
) |> as.matrix
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
)
method_names = c(1, 2, 3)
method_names <- if(is.null(names(method_names))){thing_namer("method", n_method)}
method_names
is.null(names(method_names))
method_names = c(1, 2, 3)
method_names
method_names <- if(is.null(method_names)){thing_namer("method", n_method)}
method_names
method_names = c(1, 2, 3)
method_names
if(is.null(method_names)){method_names <- thing_namer("method", n_method)}
method_names
if(is.null(level_names)){level_names <- thing_namer("level", n_levels)}
level_names
sim_imp_gs_data.ordinal <-
function(n_method = 3,
n_obs = 100,
prev = 0.5,
D = NULL,
n_levels = 5,
pmfD_plus = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE),
pmfD_minus = matrix(rep(n_levels:1 - 1, n_method), nrow = n_method, byrow = TRUE),
method_names = NULL,
level_names = NULL
){
# TODO - add level_names argument
# use names if available
if(is.null(method_names)){method_names <- thing_namer("method", n_method)}
if(is.null(level_names)){level_names <- thing_namer("level", n_levels)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
dimnames(pmfD_plus) <- list(method_names, level_names)
dimnames(pmfD_minus) <- list(method_names, level_names)
pos <- round(n_obs * prev, 0)
neg <- n_obs - pos
if (is.null(D)){D <- c(rep(1, pos), rep(0, neg))} else {pos = sum(D); neg = sum(1 - D)}
ord_sample <-
function(n, pmf){sample(1:length(pmf), n, replace = TRUE, prob = pmf)}
t_k <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
) |> as.matrix
sen <- list()
spc <- list()
for(x in 1:n_levels){
sen[[x]] <- colMeans(t_k[D == 1, ] >= x)
spc[[x]] <- colMeans(t_k[D == 0, ] < x)
}
list(t_k = t_k,
D = D,
sen = as.data.frame(sen, col.names = level_names),
spc = as.data.frame(spc, col.names = level_names))
}
method_names = NULL
pmfD_plus
pmfD_minus
dimnames(pmfD_plus) == dimnames(pmfD_minus)
dimnames(pmfD_plus)
unlist(dimnames(pmfD_plus)) == unlist(dimnames(pmfD_minus))
t_k <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
) |> as.matrix
t_k <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
) |> as.matrix()
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
)
method_names
if(is.null(method_names)){method_names <- thing_namer("method", n_method)}
method_names
t_k <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
) |> as.matrix()
t_k
se <- list()
sp <- list()
for(x in 1:n_levels){
se[[x]] <- colMeans(t_k[D == 1, ] >= x)
sp[[x]] <- colMeans(t_k[D == 0, ] < x)
}
se
sp
gen_multi_ord <-
function(n_method = 3,
n_levels = 5,
n_obs = 100,
prev = 0.5,
D = NULL,
pmfD_plus = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE),
pmfD_minus = matrix(rep(n_levels:1 - 1, n_method), nrow = n_method, byrow = TRUE),
method_names = NULL,
level_names = NULL
){
# TODO - add level_names argument
# use names if available
if(is.null(method_names)){method_names <- thing_namer("method", n_method)}
if(is.null(level_names)){level_names <- thing_namer("level", n_levels)}
pmfD_plus <- pmfD_plus / rowSums(pmfD_plus)
pmfD_minus <- pmfD_minus / rowSums(pmfD_minus)
dimnames(pmfD_plus) <- list(method_names, level_names)
dimnames(pmfD_minus) <- list(method_names, level_names)
pos <- round(n_obs * prev, 0)
neg <- n_obs - pos
if (is.null(D)){D <- c(rep(1, pos), rep(0, neg))} else {pos = sum(D); neg = sum(1 - D)}
ord_sample <-
function(n, pmf){sample(1:length(pmf), n, replace = TRUE, prob = pmf)}
generated_data <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmfD_plus[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmfD_minus[x, ])) |> as.data.frame()
) |> as.matrix()
se_observed <- list()
sp_observed <- list()
for(x in 1:n_levels){
se_observed[[x]] <- colMeans(generated_data[D == 1, ] >= x)
sp_observed[[x]] <- colMeans(generated_data[D == 0, ] < x)
}
return(
list(generated_data = generated_data,
n_method = n_method,
n_levels = n_levels,
n_obs = n_obs,
D = D,
pmfD_plus = pmfD_plus,
pmfD_minus = pmfD_minus,
method_names = method_names,
level_names = level_names,
se_observed = as.data.frame(se_observed, col.names = level_names),
sp_observed = as.data.frame(sp_observed, col.names = level_names))
)
}
gen_multi_ord
gen_multi_ord()
thing_namer("method", n_method)
thing_namer("level", n_levels)
thing_namer("abc", 20)
t_k
is.ordered(t_k)
class(t_k)
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE))
t_k1 <- t_k[D_majority == 1, ]
t_k0 <- t_k[D_majority == 0, ]
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE))
D_majority <- as.numeric(rowMeans(t_k, na.rm = TRUE) >= threshold_level)
prev_1 <- mean(D_majority)
t_k1 <- t_k[D_majority == 1, ]
t_k0 <- t_k[D_majority == 0, ]
threshold_level = round(n_levels / 2)
n_method <- ncol(t_k)
method_names <- if(is.null(names(t_k))){thing_namer("method", n_method)}else{names(t_k)}
level_names <- thing_namer("level", n_levels)
n_method
level_names <- thing_namer("level", n_levels)
D_majority <- as.numeric(rowMeans(t_k, na.rm = TRUE) >= threshold_level)
prev_1 <- mean(D_majority)
t_k1 <- t_k[D_majority == 1, ]
t_k0 <- t_k[D_majority == 0, ]
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE))
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE)) |>
unlist()
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10)
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10))
phi_1ij <-
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10)) |>
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
phi_1ij
phi_0ij <-
lapply(1:n_levels, function(j) colMeans(t_k0 == j, na.rm = TRUE)) %>%
unlist() %>%
pmax(1e-10) %>%
pmin((1 - 1e-10)) %>%
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
phi_0ij <-
lapply(1:n_levels, function(j) colMeans(t_k0 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10)) |>
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
phi_0ij
list(
prev_1 = prev_1,
phi_1ij = phi_1ij,
phi_0ij = phi_0ij)
generated_data
generated_data <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmf_pos[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmf_neg[x, ])) |> as.data.frame()
) |> as.matrix()
ord_sample <-
function(n, pmf){sample(1:length(pmf), n, replace = TRUE, prob = pmf)}
generated_data <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmf_pos[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmf_neg[x, ])) |> as.data.frame()
) |> as.matrix()
if(is.null(method_names)){method_names <- thing_namer("method", n_method)}
if(is.null(level_names)){level_names <- thing_namer("level", n_levels)}
pmf_pos <- pmf_pos / rowSums(pmf_pos)
pmf_neg <- pmf_neg / rowSums(pmf_neg)
dimnames(pmf_pos) <- list(method_names, level_names)
dimnames(pmf_neg) <- list(method_names, level_names)
pos <- round(n_obs * prev, 0)
neg <- n_obs - pos
if (is.null(D)){D <- c(rep(1, pos), rep(0, neg))} else {pos = sum(D); neg = sum(1 - D)}
pmf_pos = matrix(rep(1:n_levels - 1, n_method), nrow = n_method, byrow = TRUE)
pmf_neg = matrix(rep(n_levels:1 - 1, n_method), nrow = n_method, byrow = TRUE)
pmf_pos <- pmf_pos / rowSums(pmf_pos)
pmf_neg <- pmf_neg / rowSums(pmf_neg)
dimnames(pmf_pos) <- list(method_names, level_names)
dimnames(pmf_neg) <- list(method_names, level_names)
pos <- round(n_obs * prev, 0)
neg <- n_obs - pos
if (is.null(D)){D <- c(rep(1, pos), rep(0, neg))} else {pos = sum(D); neg = sum(1 - D)}
ord_sample <-
function(n, pmf){sample(1:length(pmf), n, replace = TRUE, prob = pmf)}
generated_data <-
rbind(
lapply(setNames(1:n_method, method_names), function(x) ord_sample(pos, pmf_pos[x, ])) |> as.data.frame(),
lapply(setNames(1:n_method, method_names), function(x) ord_sample(neg, pmf_neg[x, ])) |> as.data.frame()
) |> as.matrix()
generated_data
se_observed <- list()
sp_observed <- list()
for(x in 1:n_levels){
se_observed[[x]] <- colMeans(generated_data[D == 1, ] >= x)
sp_observed[[x]] <- colMeans(generated_data[D == 0, ] < x)
}
se_observed
gen_multi_ord()
pollinate_EM_ordinal <- function(t_k, n_levels, threshold_level = round(n_levels / 2), level_names = NULL){
n_method <- ncol(t_k)
method_names <- if(is.null(names(t_k))){thing_namer("method", n_method)}else{names(t_k)}
if(is.null(level_names)){level_names <- thing_namer("level", n_levels)}
D_majority <- as.numeric(rowMeans(t_k, na.rm = TRUE) >= threshold_level)
prev_1 <- mean(D_majority)
t_k1 <- t_k[D_majority == 1, ]
t_k0 <- t_k[D_majority == 0, ]
phi_1ij_1 <-
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10)) |>
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
phi_0ij_1 <-
lapply(1:n_levels, function(j) colMeans(t_k0 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10)) |>
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
return(
list(
prev_1 = prev_1,
phi_1ij_1 = phi_1ij_1,
phi_0ij_1 = phi_0ij_1,
n_levels = n_levels)
)
}
pollinate_EM_ordinal(t_k, 5)
rowMeans(t_k, na.rm = TRUE)
as.numeric(rowMeans(t_k >= threshold_level, na.rm = TRUE))
as.numeric(rowMeans(t_k >= threshold_level, na.rm = TRUE)) |> round()
as.numeric(rowMeans(t_k, na.rm = TRUE) >= threshold_level)
as.numeric(rowMeans(t_k, na.rm = TRUE) |>
(\(x) x + runif(n_obs, -0.000001, 0.000001))() |>
round() >= threshold_level)
as.numeric(rowMeans(t_k, na.rm = TRUE) |>
(\(x) x + runif(n_obs, -0.000001, 0.000001))() |>
round() >= threshold_level)
as.numeric(rowMeans(t_k, na.rm = TRUE) |>
(\(x) x + runif(n_obs, -0.000001, 0.000001))() |>
round() >= threshold_level)
rowMeans(t_k, na.rm = TRUE) |>
(\(x) x + runif(n_obs, -0.000001, 0.000001))() |>
round()
threshold_level
n_levels
round(n_levels / 2)
?round
ceiling(n_levels / 2)
threshold_level = ceiling(n_levels / 2)
D_majority <- as.numeric(rowMeans(t_k, na.rm = TRUE) |>
(\(x) x + runif(n_obs, -0.000001, 0.000001))() |>
round() >= threshold_level)
8 |> (\(x) x >= 2)()
1 |> (\(x) x >= 2)()
pollinate_EM_ordinal <- function(t_k, n_levels, threshold_level = ceiling(n_levels / 2), level_names = NULL){
n_method <- ncol(t_k)
method_names <- if(is.null(names(t_k))){thing_namer("method", n_method)}else{names(t_k)}
if(is.null(level_names)){level_names <- thing_namer("level", n_levels)}
D_majority <- as.numeric(
rowMeans(t_k, na.rm = TRUE) |>
(\(x) x + runif(n_obs, -0.000001, 0.000001))() |> # break ties
round() |>
(\(x) x >= threshold_level)()
)
prev_1 <- mean(D_majority)
t_k1 <- t_k[D_majority == 1, ]
t_k0 <- t_k[D_majority == 0, ]
phi_1ij_1 <-
lapply(1:n_levels, function(j) colMeans(t_k1 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10)) |>
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
phi_0ij_1 <-
lapply(1:n_levels, function(j) colMeans(t_k0 == j, na.rm = TRUE)) |>
unlist() |>
pmax(1e-10) |>
pmin((1 - 1e-10)) |>
matrix(nrow = n_levels, ncol = n_method, byrow = TRUE, dimnames = list(level_names, method_names))
return(
list(
prev_1 = prev_1,
phi_1ij_1 = phi_1ij_1,
phi_0ij_1 = phi_0ij_1,
n_levels = n_levels)
)
}
pollinate_EM_ordinal(t_k, 5)
install.packages("changer")
